package be.c4j.ee.sot;import com.github.scribejava.apis.GoogleApi20;import com.github.scribejava.core.builder.ServiceBuilder;import com.github.scribejava.core.oauth.OAuth20Service;import javax.servlet.*;import javax.servlet.annotation.WebFilter;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.io.IOException;import java.math.BigInteger;import java.security.SecureRandom;@WebFilter(urlPatterns = "*")public class AuthenticationFilter implements Filter {    private static final String CLIENT_ID = "381811457422-4fam8o7trfngjul8v22t2ivn90s3rf2v.apps.googleusercontent.com";    private static final String SECRET_ID = "ymXYd1IfDg0yq-tLsXuhkBRY";    private static final String CALLBACK = "http://localhost:8080/oauth2/oauth2callback";    public static final String USER = "user";    public static final String ORIGINAL_URL = "orginalURL";    private static final String PROTECTED_AREA = "http://localhost:8080/oauth2/pages";    private SecureRandom random = new SecureRandom();    public void init(FilterConfig filterConfig) throws ServletException {    }    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {        boolean proceed = true;        HttpServletRequest req = (HttpServletRequest) request;        HttpSession session = req.getSession();        if (session.getAttribute(USER) == null) {            // Not authenticated            StringBuffer requestURL = req.getRequestURL();            if (requestURL.toString().startsWith(PROTECTED_AREA)) {// User requests a page from the protected ar\// Keep the orignal URL                session.setAttribute(ORIGINAL_URL, requestURL.toString());                //  create the URL of Google OAUth2 Server                String authorizationUrl = createOAuthService(nextCSRFToken()).getAuthorizationUrl();                // Redirect to Google.                ((HttpServletResponse) response).sendRedirect(authorizationUrl);                proceed = false;            }        }        if (proceed) {            chain.doFilter(request, response);        }    }    public void destroy() {    }    public static OAuth20Service createOAuthService(String csrfToken) {        //Configure        ServiceBuilder builder = new ServiceBuilder();        ServiceBuilder serviceBuilder = builder                .apiKey(CLIENT_ID)                .apiSecret(SECRET_ID)                .callback(CALLBACK)                // Scope defines to which Google services we will have access                .scope("openid profile email ");        //.debug();        if (csrfToken != null && !csrfToken.isEmpty()) {            serviceBuilder.state(csrfToken);        }        return serviceBuilder.build(GoogleApi20.instance());    }    private String nextCSRFToken() {        return new BigInteger(130, random).toString(32);    }}